y2 = outer(latvars$g, coefs) + eps
models = summary(lm(y2 ~ latvars$g))
sim2tabsg[[1]][sim,] = sapply(models, function(x) x$coefficients[2,4])
sim2tabsg[[2]][sim,] = sapply(models, function(x) x$r.squared)
# take a further subset of 150 subjects
# not modeling the full longitudinal design, just seeing minimum rsq for 150 subjects
rho = 0.6
ntimepts = 4
# AR(1) covariance structure
Sigma = matrix(rho, ntimepts, ntimepts)^abs(outer(1:ntimepts, 1:ntimepts, '-'))
latvars = latvars[ sample(naim2, naim3),]
# Same thing except with "g"
eps = mvrnorm(naim3, mu = rep(0, ntimepts), Sigma=Sigma)
xbeta = outer(latvars$g, coefs)[rep(1:naim3, each=4),]
y2 =  xbeta + c(t(eps))
aim3data = data.frame(y=y2, gvar = latvars$g[rep(1:naim3, each=4)], subject=rep(1:naim3, each=ntimepts))
models = lapply(1:length(coefs), function(x) summary(gee(as.formula(paste0('y.', x, '~gvar')), id=subject, data=aim3data, corstr = 'exchangeable')) )
aim3tabs[[1]][sim,] = sapply(models, function(x) pnorm(-abs(x$coefficients[2,5])) * 2)
# scale out the variance of x, the variance of y is 1
vg = var(latvars$g)
aim3tabs[[2]][sim,] = coefs * sqrt(vg) / sqrt(coefs^2 * vg +1)
cat(sim, '\t')
}
y = colMeans(sim2tabs[[1]]<0.05/ncomp, na.rm=TRUE)
x = colMeans(sim2tabs[[2]], na.rm=TRUE)
plot(x,y, ylab='power', xlab='effect size', main='psy')
# obtainable r-sq with 80% power. r^2=0.09
x[which(y>0.8)[1]]
y = colMeans(sim2tabsg[[1]]<0.05/ncomp, na.rm=TRUE)
x = colMeans(sim2tabsg[[2]], na.rm=TRUE)
plot(x,y, ylab='power', xlab='effect size', main='g')
# obtainable r-sq with 80% power. r^2=0.05
x[which(y>0.8)[1]]
y = colMeans(aim3tabs[[1]]<0.05/2, na.rm=TRUE)
x = colMeans(aim3tabs[[2]], na.rm=TRUE)
plot(x^2,y, ylab='power', xlab='effect size', main='g')
# obtainable r-sq with 80% power for rho=0.8. r^2=0.05
x[which(y>0.8)[1]]^2
6 * 5
logit = function(p){
log(p/(1-p))
}
expit = function(logp){
1/(1 + exp(-logp))
}
?rbinom
n1 = 300
n2 = 100
logit = function(p){
log(p/(1-p))
}
expit = function(logp){
1/(1 + exp(-logp))
}
nsim = 1000
int = logit(.28)
betas = 1 # seq(1:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
for(sim in 1:nsim){
for(beta in betas){
nind = 0
# sample for case-control study
while(n1samp<n1 | n2samp<n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
if(n2samp==n2){
while(y==1)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp<n1 | n2samp<n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
if(n2samp==n2){
while(y==1)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
nsim = 1
int = logit(.28)
betas = 1 # seq(1:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp<n1 | n2samp<n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
if(n2samp==n2){
while(y==1)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
data
size(data)
dim(data)
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp<n1 & n2samp<n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
if(n2samp==n2){
while(y==1)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
data
nind
n1samp!=n1 & n2samp!=n2
n1samp!=n1 | n2samp!=n2
nsim = 1
int = logit(.28)
betas = 1 # seq(1:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
if(n2samp==n2){
while(y==1)
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
y
n1samp==n1
nsim = 1
int = logit(.28)
betas = 1 # seq(1:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==0){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
y
n1samp==n1
n1samp = 10
n2samp = 10
n1samp = n1
n1samp==n1
nsim = 1
int = logit(.28)
betas = 1 # seq(1:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==0){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
}
data
summary(glm(y ~ x, data=data))
test = summary(glm(y ~ x, data=data))
test$coefficients
test$coefficients[2,4]
seq(0:20)/10
(0:20)/10
nsim = 5
int = logit(.28)
betas = (0:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
pvalues = matrix(NA, nsim, length(betas))
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==0){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
summary(glm(y ~ x, data=data))
pvalues[nsim, which(betas == beta)] = test$coefficients[2,4]
}
}
pvalues
nsim = 5
int = logit(.28)
betas = (0:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
pvalues = matrix(NA, nsim, length(betas))
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==0){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
}
summary(glm(y ~ x, data=data))
pvalues[sim, which(betas == beta)] = test$coefficients[2,4]
}
pvalues
nsim = 5
int = logit(.28)
betas = (0:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
pvalues = matrix(NA, nsim, length(betas))
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==0){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
pvalues[sim, which(betas == beta)] = summary(glm(y ~ x, data=data))$coefficients[2,4]
}
}
pvalues
betas
nsim = 5
int = logit(.28)
betas = (0:20)/10
data = data.frame(y = rep(NA, n1+n2), x = rep(NA, n1+n2) )
pvalues = matrix(NA, nsim, length(betas))
for(sim in 1:nsim){
for(beta in betas){
nind = 0
n1samp = n2samp = 0
# sample for case-control study
while(n1samp!=n1 | n2samp!=n2){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
if(n1samp==n1){
while(y==1){
x = rnorm(1)
py = expit(int + x*betas)
y = rbinom(1, 1, py)
}
}
if(n2samp==n2){
while(y==0){
x = rnorm(1)
py = expit(int + x*beta)
y = rbinom(1, 1, py)
}
}
n1samp = n1samp + y
n2samp = n2samp + (1-y)
nind = n1samp + n2samp
data [nind, c('y', 'x')] = c(y, x)
}
pvalues[sim, which(betas == beta)] = summary(glm(y ~ x, data=data))$coefficients[2,4]
}
}
pvalues
colMeans(pvalues<0.05)
source('~/Box Sync/grants/austin_2018/power_simulations.R', echo=TRUE)
head(pvalues)
colMeans(pvalues<0.05)
plot(betas, colMeans(pvalues<0.05))
cbind(betas, colMeans(pvalues<0.05))
plot(cbind(betas, colMeans(pvalues<0.05)), xlab='Standardized log-odds ratio', ylab='Power', type='l')
betas * sqrt(3)/pi
cbind(betas, betas * sqrt(3)/pi)
pdf('~/grants/austin_2018/power.pdf')
plot(cbind(betas, colMeans(pvalues<0.05)), xlab='Standardized log-odds ratio', ylab='Power', type='l', bty='l', main='Aim 1 Power')
dev.off()
pdf('~/Box Sync/grants/austin_2018/power.pdf')
plot(cbind(betas, colMeans(pvalues<0.05)), xlab='Standardized log-odds ratio', ylab='Power', type='l', bty='l', main='Aim 1 Power')
dev.off()
79-41
library(Hmisc)
?aregImpute
fit.mult.impute(
fit.mult.impute
setwd('~/code/pbj_intro_rmd/')
workdir = '~/Box Sync/work/synthesis/'
dat = read.csv(file.path(workdir, 'Kirby_bias_estimates_20190320.csv')
dat = read.csv(file.path(workdir, 'Kirby_bias_estimates_20190320.csv'))
dat = read.csv(file.path(workdir, 'Kirby_bias_estimates_20190320.csv'))
workdir = '~/Box Sync/work/synthesis'
dat = read.csv(file.path(workdir, 'Kirby_bias_estimates_20190320.csv'))
workdir = '~/Box Sync/work/synthesis'
dat = read.csv(file.path(workdir, 'Kirby_bias_estimates_20190320.csv'))
plot(dat$natlas, log10(-dat$ncor), col=as.numeric(dat$subject))
plot(dat$natlas, log10(dat$mse), col=as.numeric(dat$subject))
plot(dat$natlas, log10(dat$intensity_bias), col=as.numeric(dat$subject))
library(nlme)
?lme
plot(dat$natlas, log10(dat$intensity_bias), col=as.numeric(dat$subject))
plot(dat$natlas, log10(-dat$ncor), col=as.numeric(dat$subject))
lme(log10(intensity_bias) ~ natlas, data=dat, random=1 | subject)
dat$subject
lme(log10(intensity_bias) ~ natlas, data=dat, random=~1 | subject)
ints_bias_mm = lme(log10(intensity_bias) ~ natlas, data=dat, random=~1 | subject)
summary(ints_bias_mm)
library(mgcv)
?gamm
ints_bias_gam = gamm(log10(intensity_bias) ~ s(natlas), data=dat, random=~1 | subject)
ints_bias_gam = gamm(log10(intensity_bias) ~ s(natlas), data=dat, random=list(subject=~1))
ints_bias_gam
summary(ints_bias_gam$lme)
ints_bias_mm = lme(log10(intensity_bias) ~ natlas, data=dat, random=~1 | subject)
ints_bias_mm
summary(ints_bias_gam)
summary(ints_bias_mm)
summary(ints_bias_gam$lme)
getwd()
?rmarkdown::render
render('introduction_to_pbj.Rmd', 'pdf')
rmarkdown::render('introduction_to_pbj.Rmd', 'pdf')
rmarkdown::render('introduction_to_pbj.Rmd', 'pdf_file')
rmarkdown::render('introduction_to_pbj.Rmd', 'pdf_document')
rmarkdown::render('introduction_to_pbj.Rmd', 'pdf_document')
qnorm(0.001)
